<!-- filepath: TripMate-Backend/views/index.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Travel Assistant API - Home</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap 5 CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: #d6dde4;
        }

        .container {
            margin-top: 40px;
        }

        .response-box {
            min-height: 80px;
            background: #fff;
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 16px;
            margin-top: 10px;
        }

        .nav-link.active {
            font-weight: bold;
        }

        .feature-list li {
            margin-bottom: 8px;
        }

        /* New styles for documentation tables */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

        th,
        td {
            padding: 12px;
            text-align: left;
            border: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
        }

        pre {
            background-color: #f8f9fa;
            padding: 8px;
            border-radius: 5px;
            overflow-x: auto;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-blue-400 shadow-sm">
        <div class="container">
            <a class="navbar-brand" href="/">Travel Assistant API</a>
            <div>
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item"><a class="nav-link active" href="/">Home</a></li>
                    <li class="nav-item"><a class="nav-link" href="/docs">Documentation</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="container">
        <div class="text-center mb-5">
            <h1 class="display-5">Travel Assistant API</h1>
            <p class="lead">A smart travel backend built with Node.js + Express that combines geolocation, weather
                forecasts, and facility information to help users plan trips based on their selected city and state.</p>
        </div>
        <div class="row g-4">
            <div class="col-md-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Test API Endpoints</h5>
                        <p class="card-text">Click the buttons below to see example responses from each route.</p>
                        <div class="d-grid gap-2">
                            <button class="btn btn-primary"
                                onclick="testRoute('/location-info?city=delhi&state=delhi')">Location Info (GET
                                /location-info)</button>
                            <button class="btn btn-success" onclick="testRoute('/preference/domestic-trips?budget=25000')">Trip Preferences (GET
                                /preference/domestic-trips?budget=25000)</button>
                            <button class="btn btn-info" onclick="testRoute('/user/profile')">User Info (GET /user/profile)</button>
                            <button class="btn btn-secondary" onclick="testRoute('/api')">Greeting (GET /api)</button>
                        </div>
                        <div id="response" class="response-box mt-3"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">üöÄ Features</h5>
                        <ul class="feature-list">
                            <li><strong>üîç Geolocation Search:</strong> Get latitude & longitude of a city using
                                Open-Meteo's free geocoding API.</li>
                            <li><strong>üå¶ Weather Forecast:</strong> Fetch 5-day daily max/min temperature forecasts
                                using Open-Meteo‚Äôs weather API.</li>
                            <li><strong>üè• Nearby Facilities & Landmarks:</strong> Uses OpenStreetMap Nominatim API to
                                get nearby points of interest.</li>
                            <li><strong>üõ°Ô∏è Security & Rate Limiting:</strong> Prevents abuse with express-rate-limit
                                and CORS configuration.</li>
                            <li><strong>üì¶ Organized API Structure:</strong> Express.js server with routes for
                                <code>/location-info</code>, trip preferences, and static view.</li>
                        </ul>
                        <a href="/docs" class="btn btn-outline-dark mt-2">View API Documentation</a>
                    </div>
                </div>
            </div>
        </div>
        <!-- User Authentication & Profile API Documentation -->
        <section>
            <h2>User Authentication & Profile API</h2>
            <table border="1" cellpadding="6" cellspacing="0">
                <thead>
                    <tr>
                        <th>Method</th>
                        <th>Endpoint</th>
                        <th>Protected?</th>
                        <th>Description</th>
                        <th>Body/Headers</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>POST</td>
                        <td>/user/register</td>
                        <td>No</td>
                        <td>Register a new user</td>
                        <td>
                            <pre>
{
  "username": "yourname",
  "email": "your@email.com",
  "password": "yourpassword"
}
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td>POST</td>
                        <td>/user/login</td>
                        <td>No</td>
                        <td>Login and receive JWT tokens</td>
                        <td>
                            <pre>
{
  "email": "your@email.com",
  "password": "yourpassword"
}
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td>GET</td>
                        <td>/user/profile</td>
                        <td>Yes</td>
                        <td>Get the authenticated user's profile</td>
                        <td>
                            <b>Headers:</b>
                            <pre>
Authorization: Bearer &lt;access_token&gt;
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td>POST</td>
                        <td>/user/logout</td>
                        <td>Yes</td>
                        <td>Logout user (client should delete token)</td>
                        <td>
                            <b>Headers:</b>
                            <pre>
Authorization: Bearer &lt;access_token&gt;
                            </pre>
                        </td>
                    </tr>
                    <tr>
                        <td>POST</td>
                        <td>/user/refresh-token</td>
                        <td>No</td>
                        <td>Get a new access token using a refresh token</td>
                        <td>
                            <pre>
{
  "refreshToken": "&lt;refresh_token&gt;"
}
                            </pre>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p>
                <b>Note:</b> All protected routes require a valid JWT access token in the <code>Authorization</code> header.
            </p>
        </section>
        <footer class="mt-5 text-center text-muted">
            &copy; <%= new Date().getFullYear() %> Travel Assistant API &mdash; Powered by Node.js & Express<br>
                Deepak Kumar | <a href="mailto:dpk.41deep@gmail.com">dpk.41deep@gmail.com</a>
        </footer>
    </div>
    <script>
        async function testRoute(route) {
            const responseBox = document.getElementById('response');
            responseBox.innerHTML = '<span class="text-secondary">Loading...</span>';
            try {
                const res = await fetch(route);
                const contentType = res.headers.get('content-type');
                let data;
                if (contentType && contentType.includes('application/json')) {
                    data = await res.json();
                    responseBox.innerHTML = '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
                } else {
                    data = await res.text();
                    responseBox.innerHTML = '<pre>' + data + '</pre>';
                }
            } catch (err) {
                responseBox.innerHTML = '<span class="text-danger">Error: ' + err.message + '</span>';
            }
        }
    </script>
</body>

</html>